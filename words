float.x    = ' ' ++ x  stuck to EOL, explicit x = navigate past next float
join.x     = insert x between words, default join.' '; show shadow join character after cursor

DOT        = .
BUC        = $
NIL        = ~
CAB        = _
QOT        = ' float.'
MOLD       = $__
BUNT       = *__
CLAM       = _[__]
PREV       = ^__
AT       = @
WUT        = ?
CALL:      = (__ float.)
:LLAC      = )
KICK       = (__)
CONS:      = [__ float.]
:SNOC      = ]
LIST:      = ~[__ float.]
LONE       = [__]
PAIR       = :-
TREL       = :+
QUAD       = :^
LIST-TALL: = :~

COLDE      = insert comment tilde, closing all non-core contexts
TALL       = force tall mode via empty ::
COMT:      = insert/edit ::
COMT-TALL: = insert/edit many ::
:TMOC      = unjump from comment
COMT-ARM   = comment surrounding non-$ arm
COMT-LINE  = comment everything that would be closed by RET
TODO:      = [__] :: 
PATH:      = / set-join./
INCLUDE    = //
BASE       = === 
RET        = newline, resetting join mode; or navigate past -- == etc
RUN-DOJO:  = '{{dojo-res:$(gensym)}}', using dojo to produce an expression
CALL-LONE  = %-
CALL-PAIR  = %+
CALL-MANY: = %-  __  :*  float.==
FOLD:      = ;:
CAST       = ^-
IS         = infix = (XX fix for types)
CORE       = |%, float.'\n--', '++  __' on next line
EROC       = --, removing non-leading '++  __'
DOOR       = |_  __, float as per CORE
GATE       = |=  
EXTRACT    = =^
ALIAS      = =*
USE        = =,
LET        = =/
MUT        = =.
LEAD       = ^?
MOD        = %= irregular, i.e. postfix.(__ __)
RUN:       = %~
STUB       = !!
FROND:     = [%__ float.]
FRONDS:    = :~  [%__ float.], RET = FROND:, float.==
ARROW:     = ;~
FORK:      = $?
FORK-SYMS: = $? $__ join.' $'
:KROF      = close $?
FROM       = infix .
DASH       = infix -
PULL       = infix :
PULLS:     = join.:
DASHED     = retroactive infix -
ARGS       = +<.$
SELF       = ..<nearest non-$ arm>
SAVE       = Cmd-s
HEAD, TAIL = - + building a ->- chain

URL:       = https:// set-join..


# Magic
- Path mode: join./ outer expressions
- File & scope-based autocomplete is used to distinguish between "call vane" and "call-vane", latter taking precedence. Limbs to limbs, terms to terms. Expanded to "everything possible to get into scope" in join.: mode
  + same for lib/sur
  + alternately just dash everywhere
- Bare __ as syntax stub, cf !! as type stub. Inserted by basically all runes.
- Lines starting with '++' join.- until first other expression
  + float a subsequent '++  __' when filled in and selected, navigable with RET
  + :: handling, with search tags if you must
- Run-dojo mode opens repl, on first non-crash closes repl and pastes in result
- Wide/tall auto switching, with trailing comments enforcing tall (enforcing wide probably counterproductive?)
  + LIST-TALL: CASE: etc. add a nesting level that isn't redundant with things on the same line, CASE-WIDE: CONS: CALL: and such are all closed by one RET
- Generally parse "insert x of wrong mode" as "jump to next appropriate location"
  + non-molds in ^-
  + commands in ', tho that might be annoying for bootstrapping
  + Runes in normal comment mode (contrast commented out code, or manually building them from glyphs)
- IS NIL CONS: etc. emit 151 in tile mode
- AT u d  and such works, just grabs single letters
- Hoon indentation gets applied to words in log, retroactively per wide/tall switching
- Rainbow paren currently active __ levels(i.e. "what will RET do")?
- Normal letter and number globbing for stuff like "oauth2"
- impilict CALL: from saying "a b c" where a is a gate
  + except in molds, except except when *a is a mold
    * if previous arm was a mold, treat this as one, so you can day '++user cord' cleanly
  + fixed arity (a __ __) autocomplete by looking at sample, e.g. map, set, pair
  + override with LONE, fixed-arity autocomplete disappears when navigated away
  + roll back if this doesn't work

# Overlay modes
- probably as ruby text?
- item counts for ~[] / cores / ?- / etc. variable arity
- explicit '[ ' ' ]' around all expressions
- Show steno captions on command word log
- Show glyph expansions on command word log (probably easier to just run the thing)

# TODO
- jump between open __s?
- Similarly, some way to tab out of '' [] etc; define -- ] ) etc. as pure navigation commands? (In which case symmetrical ones for moving back left)
- define forward/backward arrows as navigating in (possibly normalized) instruction stream, up/down going between RETs
  + Any non-tail command insertion is effectively a rebase
  + keep immutable hashes of fork points around to concisely define tree undo, dag log files
- type-to-tlv name autogeneration in |= / $:
- bikeshed what to call EXTRACT
  + "SIP"
  + "NEW-CHANGING-OLD"
  + "PIN-SET" (=+ =.)
  + "LET-MUT"
- how do command words get defined anyway? Reuse one of stenoboard FN keys as a CMD and call it a day? ("CALL:" vs "call" is basically a use-mention distinction).
  + or do something with *, or number bar
- Comment interaction with RET
- Shortcut for "a new arm, which I will now define in the current core"; keeping "jump back to call site" on RET stack
  + ~explicit~ ret stack?
- Explicit "all these arms are molds" mode? Curtis' proposed "structure core" related.
  
# Examples

```
::
::::  /hoon/jael/test/lib
  ::
//  /===/sys/vane/jael
::
::::
  ::
((. *vase) ~2016.12.15..23.02.18..f874 `@e`'totally-eny' _~)
::
::::
  ::
|_  mow/(list move)
++  do-task
  |=  task:able:^jael.zuse
  =^  mow-new  $.call
    (call [/test-jael]~ %noun %soft +<)
  +>.$(mow (welp mow mow-new))
--
::
::::
  ::
(do-task %init ~sipnum (my giv+['pittyp' 'Pittyp'] ~))
::
::::
  ::
[lex mow=mow]

COLDE-COMT: PATH: hoon jael test lib
INCLUDE-PATH: BASE sys vane jael
COLDE
CALL-MANY: CALL: DOT BUNT vase
  RUN-DOJO: now
  CAST AT e QOT totally HEP eny
  CLAM NIL
COLDE
DOOR mow IS list move 
RET do task
  GATE  PULLS: task able jael FROM zuse
  RET EXTRACT   mow new DASHED   BUC FROM call
    call LIST: PATH: test HEP jael :SNOC SYM noun SYM soft ARGS
  RET SELF MOD mow  welp mow mow new
EROC
COLDE
do task SYM init
COLDE
CONS: lex mow IS mow
SAVE
```

```
::
::::  /hoon/call-jael/app
  ::
=*  state  $~
|_  {bowl state}
++  poke--run
  |=  $~
  %-  emil
  ;:  welp
    subscribe-all 
    test-ry  test-pki 
    unsubscribe
  ==
::
++  all-subscr
  :~  veil+our
      vein+~
      vest+~
      vine+~
  ==
::
++  subscribe-all
  %+  turn  all-subscr
  |=  a/subscription
  [-.a a +.a]
::
++  test-ry
  =/  him  fakesub
  =/  him2  fakesub
  =/  promises  `safe`[generate some rites]
  :~  [%mint him promises]
      [%move him him2 promises]
      [%burn him2 promises]
      [%hail him2 promises2]
  ==
::
++  test-pki
  =/  him  fakesub
  :~  [%meet (make-will him)]
  ==
++  unsubscribe  
  %+  turn  all-subscr
  |=(a/path [%nuke a ~])
::
++  emil  !!
--

COLDE-COMT: PATH: hoon call DASH jael app
ALIAS state MOLD NIL
DOOR CONS: bowl state
RET poke x run
  GATE NIL
  CALL-LONE emil
  FOLD: welp
    subs DASH all
    test DASH rights
    test DASH pki
    unsubscribe
RET all subs
  FRONDS: veil our TALL
      RET vein NIL
      RET vest NIL
      RET vine NIL
      RET
RET subs all
  CALL-PAIR  all subs
  GATE a IS sub
  CONS:  HEAD FROM a  a  TAIL FROM a
RET test rights
  LET him fakesub
  LET him DASH 2 fakesub
  LET promises CAST safe TODO: generate some rites
  RET FRONDS: mint him promises
          RET move  him  him 2  promises
          RET burn  him 2  promises
          RET hail  him 2  promises
          RET
RET test pki
  LET him fakesub
  FRONDS: meet  CALL: make DASH will him
      RET
RET unsubscribe
  CALL-PAIR  turn  all subs
  GATE a IS path FROND: nuke a nil
RET emil STUB
SAVE
```

```
::  Test url +https://www.googleapis.com/oauth2/v1/userinfo
::
::::  /hoon/googleapis/com/sec
  ::
/+    oauth2, interpolate, hep-to-cab
::
::::
  ::
|%
++  user-state  {ber/token ref/refresh}:oauth2
++  suffix-email
  %+  cook  welp
  ;~  plug
    (star ;~(less pat prn))
    ;~(pose (plus prn) (easy "@gmail.com"))
  ==
::
++  auth-usr
  |=  usr/iden
  =+  lon=(fall (slaw %t usr) usr)
  %+  add-query:interpolate  'https://accounts.google.com/o/oauth2/v2/auth'
  %-  quay:hep-to-cab
  :~  login-hint+?~(lon '' (crip (rash lon suffix-email)))
      access-type+%offline
      response-type+%code
      prompt+%consent
  ==
++  scopes
  :~  'https://mail.google.com'
      'https://www.googleapis.com/auth/plus.me'
      'https://www.googleapis.com/auth/userinfo.email'
  ==
::
++  exchange-url  'https://www.googleapis.com/oauth2/v4/token'
--
::
::::
  ::
|_  {bal/(bale keys:oauth2) own/user-state}
::  ++auth is a "standard refreshing oauth2" core, which implements the
::  most common handling of oauth2 semantics. see lib/oauth2 for more details,
::  and examples at the bottom of the file.
++  auth  ^?
  =+  a=~(standard-refreshing oauth2 bal ber.own)
  %^  a(state-usr &)
    ..auth  ref.own
  |=(b/user-state ..auth(own b)))
::
++  filter-request  =,(auth (out-refresh-or-add-header exchange-url scopes dialog-url))
++  dialog-url  (auth-usr usr.bal)
::
++  filter-response  =,(auth res-save-after-refresh)
::
++  receive-auth-query-string  =,(auth (in-code-to-token exchange-url))
++  receive-auth-response      =,(auth bak-save-both-tokens)
:: ++  update  *user-state
--


COMT: Test url PLUS PASTE.1 # URL:  googleapis com PATH:  oauth2  v1  userinfo
COLDE-COMT: PATH: hoon googleapis com sec
LIBS: oauth2  interpolate  hep to cab
COLDE
CORE
    user state  MOLD CONS: ber IS token  ref IS refresh :LLEC PULL oauth2
RET suffix email
  CALL-PAIR: cook welp
  ARROW-TALL: plug
        star ARROW: less pat prn
    RET ARROW: pose  plus prn  easy QUT AT gmail .com
    RET
RET auth  usr
  GATE  usr  name user
  LET  lon  fall  slaw SYM t usr  usr
  RET CALL-PAIR PULL: add DASH query  interpolate
    RET QOT PASTE.2 # URL: accounts google com PATH: o oauth2 v2 auth
  FRONDS:  login CAB hint     IF-NIL  QOT QOT crip rash lon suffix email
       RET access CAB type    SYM offline
       RET response CAB type  SYM code
       RET prompt             SYM consent
       RET
RET scopes  {pasting and interactive editing omitted}
RET exchange url PASTE.3 # URL: etc.
EROC
COLDE
DOOR CONS: bay IS USE oauth2  bale keys    own IS  user state
RET auth  LEAD
  LET a RUN: standard refreshing oauth2 bay ber FROM own
  RET CALL:  a MOD state usr & # auto-widen
        SELF  ref FROM own
      GATE b IS user state SELF MOD own b
RET filter request
  USE auth  out refresh or add header  exchange url  scopes  dialog url
RET dialog url  auth usr  usr FROM bal
RET filter response  USE auth  res save after refresh
RET recieve auth query string  USE auth  in code to token  exchange url
RET recieve auth response  USE auth  bak save both tokens
RET update  BUNT user state COMT-LINE
SAVE
```

```
::  
::::  /hoon/talk/sur
  ::
|%
++  audience  (map partner (pair envelope delivery))    ::  destination+state
++  atlas  (map ship status)                            ::  presence map
++  bouquet  (set flavor)                               ::  complete aroma
++  command                                             ::  effect on party
  $%  {$design (pair knot (unit config))}               ::  configure+destroy
      {$publish (list thought)}                         ::  originate
      {$review (list thought)}                          ::  deliver
  ==                                                    ::
++  cabal                                               ::  metaconfiguration
  $:  loc/config                                        ::  local config
      ham/(map station config)                          ::  neighborhood configs
  ==                                                    ::
++  config                                              ::  party configuration
  $:  sources/(set partner)                             ::  pulls from
      caption/cord                                      ::  about
      cordon/control                                    ::  restricted to
  ==                                                    ::
++  control  (pair posture (set ship))                  ::  access control
++  delivery                                            ::  delivery state
  $?  $pending                                          ::  undelivered
      $received                                         ::  delivered
      $rejected                                         ::  undeliverable
      $released                                         ::  sent one-way
      $accepted                                         ::  fully processed
  ==                                                    ::
++  envelope  (pair ? (unit partner))                   ::  visible sender
++  flavor  path                                        ::  content flavor
++  human                                               ::  human identifier
  $:  true/(unit (trel @t (unit @t) @t))                ::  true name
      hand/(unit @t)                                    ::  handle
  ==                                                    ::
++  passport                                            ::  foreign flow
  $%  {$twitter p/@t}                                   ::  twitter
  ==                                                    ::
++  posture                                             ::  security posture
  $?  $black                                            ::  channel
      $white                                            ::  chamber
      $green                                            ::  journal
      $brown                                            ::  mailbox
  ==                                                    ::
++  presence   ?($gone $hear $talk)                     ::  status type
++  register  (pair atlas (map partner atlas))          ::  ping me, ping srcs
++  shelf  (map knot (pair posture cord))               ::  ship shape
++  report                                              ::  talk update
  $%  {$cabal cabal}                                    ::  config neighborhood
  ::  {$folder (list report)}                           ::  multiple
      {$grams (pair @ud (list telegram))}               ::  beginning thoughts
      {$group register}                                 ::  presence
      {$house shelf}                                    ::  station set
      {$glyph (jug char (set partner))}                 ::  relevant binding
  ==                                                    ::
++  speech                                              ::  narrative action
  $%  {$lan p/knot q/@t}                                ::  local announce
      {$exp p/@t}                                       ::  hoon line
      {$non $~}                                         ::  no content (yo)
      {$ext p/@tas q/*}                                 ::  extended action
      {$fat p/torso q/speech}                           ::  attachment
      ::  {$inv p/station}                              ::  invite to station
      {$url p/purf:^eyre}                               ::  parsed url
      {$ire p/serial q/speech}                          ::  in-reply-to
      {$lin p/? q/@t}                                   ::  no/@ text line
      {$mor p/(list speech)}                            ::  multiplex
      {$app p/@tas q/@t}                                ::  app message
      $:  $api                                          ::  api message
          service/@tas                                  ::  service name
          id/@t                                         ::  id on the service
          id-url/purf:^eyre                             ::  link to id
          summary/@t                                    ::  summary of event
          body/@t                                       ::  body of event
          url/purf:^eyre                                ::  link to event
          meta/json                                     ::  other data for web
      ==                                                ::
  ==                                                    ::
++  serial     @uvH                                     ::  unique identity
++  partner    (each station passport)                  ::  interlocutor
++  status     (pair presence human)                    ::  participant
++  statement  (trel @da bouquet speech)                ::  when this
++  station    (pair ship knot)                         ::  domestic flow
++  telegram   (pair ship thought)                      ::  who which whom what
++  thought    (trel serial audience statement)         ::  which whom what
++  torso                                               ::  attachment
  $%  {$name (pair @t torso)}                           ::  named attachment
      {$text (list @t)}                                 ::  text lines
      {$tank (list tank)}                               ::  tank list
  ==                                                    ::
--

COLDE-COMT: PATH: hoon talk sur
CORE
    audience  map partner  pair envelope delivery    COMT: destination PLUS date
RET atlas     map ship status                        COMT: presence map
RET bouqet    set flavor                             COMT: complete aroma
RET command                                          COMT: ...       
  MOLD-FRONDS:                                       COMT: ...
    RET design    pair knot  unit config             COMT: ...
    RET publish   list thought                       COMT: ...
    RET review    list thought                       COMT: ...
    RET
RET cabal MOLD-CONS:                                 COMT: ...
      loc IS config                                  COMT: ...
  RET ham IS map station config                      COMT: ...
RET config MOLD-CONS: # auto-widened                 COMT: ...
  RET sources IS set partner                         COMT: ...
  RET caption IS cord                                COMT: ...
  RET  cordon IS control                             COMT: ...
RET control  pair posture  set ship                  COMT: ...
RET delivery                                         COMT: ...
  FORK-SYMS:  pending                                COMT: ...
          RET received                               COMT: ...
          RET rejected                               COMT: ...
          RET released                               COMT: ...
          RET accepted                               COMT: ...
          RET
RET envelope  pair WUT  unit partner                 COMT: ...
RET flavor  path                                     COMT: ...
RET human MOLD-CONS:                                 COMT: ...
  RET true IS  unit   trel  AT t  unit AT t  AT t    COMT: ...
  RET hand IS  unit AT t                             COMT: ...
RET passport  MOLD-FRONDS:                           COMT: ...
  RET  twitter  p IS AT t                            COMT: ...
  RET
RET posture                                          COMT: ...
  FORK-SYMS: black                                   COMT: ...
         RET white                                   COMT: ...
         RET green                                   COMT: ...
         RET brown                                   COMT: ...
         RET
RET presence  FORK-SYMS: gone hear talk  :KROF       COMT: ...
RET register  pair atlas  map partner atlas          COMT: ...
RET shelf     map knot  pair posture cord            COMT: ...
RET report  MOLD-FRONDS:                             COMT: ...
  RET cabal cabal                                    COMT: ...
  RET folder   list report                           COMT: ...
  RET grams    pair @ud  list telegram               COMT: ...
  RET group    register                              COMT: ...
  RET house    shelf                                 COMT: ...
  RET glyph    jug  char  set partner                COMT: ...
  RET
RET speech  MOLD-FRONDS:                             COMT: ...
  RET lan  p IS knot  q IS AT t                      COMT: ...
  RET exp  p IS AT t                                 COMT: ...
  RET non  NIL                                       COMT: ...
  RET ext  p IS AT t a s  q IS NOUN                  COMT: ...
  RET fat  p IS torso  q IS speech                   COMT: ...
  RET inv  p IS station  COMT-ARM                    COMT: ...
  RET url  p IS purf PULL eyre                       COMT: ...
  RET ire  p IS serial  q IS speech                  COMT: ...
  RET lin  p IS WUT  q IS AT t                       COMT: ...
  RET mor  p IS list speech                          COMT: ...
  RET app  p IS AT t a s  q IS AT t                  COMT: ...
      api  CONS:                                     COMT: ...
        service IS AT t a s                          COMT: ...
             id IS AT t                              COMT: ...
         id url IS purf PULL eyre                    COMT: ...
        summary IS AT t                              COMT: ...
           body IS AT t                              COMT: ...
            url IS purf PULL eyre                    COMT: ...
           meta IS json                              COMT: ...
      RET
  RET
RET serial     AT u v H                              COMT: ...
RET partner    each station passport                 COMT: ...
RET status     pair presence human                   COMT: ...
RET statement  trel  AT d a  bouquet  speech         COMT: ...
RET station    pair ship knot                        COMT: ...
RET telegram   pair ship thought                     COMT: ...
RET thought    trel serial audience statement        COMT: ...
RET torso  MOLD-FRONDS:                              COMT: ...
    name  pair  AT t  torso                          COMT: ...
    text  list AT t                                  COMT: ...
    tank  list tank                                  COMT: ...
SAVE
```
